import os
import cv2
import time
import math
import numpy as np
from config_reader import config_reader
from model import get_testing_model
import util
from scipy.ndimage.filters import gaussian_filter

# Colors for drawing keypoints
colors = [[255, 0, 0], [255, 85, 0], [255, 170, 0], [255, 255, 0], [170, 255, 0], [85, 255, 0],
          [0, 255, 0], [0, 255, 85], [0, 255, 170], [0, 255, 255], [0, 170, 255], [0, 85, 255],
          [0, 0, 255], [85, 0, 255], [170, 0, 255], [255, 0, 255], [255, 0, 170], [255, 0, 85]]

def process(input_image, params, model_params, model):
    
    oriImg = cv2.imread(input_image)
    if oriImg is None:
        print(f"‚ö† Failed to load image: {input_image}")
        return None, None

    multiplier = [x * model_params['boxsize'] / oriImg.shape[0] for x in params['scale_search']]
    heatmap_avg = np.zeros((oriImg.shape[0], oriImg.shape[1], 19))
    paf_avg = np.zeros((oriImg.shape[0], oriImg.shape[1], 38))

    for m in range(len(multiplier)):
        scale = multiplier[m]
        imageToTest = cv2.resize(oriImg, (0, 0), fx=scale, fy=scale, interpolation=cv2.INTER_CUBIC)
        imageToTest_padded, pad = util.padRightDownCorner(imageToTest, model_params['stride'], model_params['padValue'])

        input_img = np.transpose(np.float32(imageToTest_padded[:, :, :, np.newaxis]), (3, 0, 1, 2))
        output_blobs = model.predict(input_img)

        heatmap = np.squeeze(output_blobs[1])
        heatmap = cv2.resize(heatmap, (0, 0), fx=model_params['stride'], fy=model_params['stride'], interpolation=cv2.INTER_CUBIC)
        heatmap = heatmap[:imageToTest_padded.shape[0] - pad[2], :imageToTest_padded.shape[1] - pad[3], :]
        heatmap = cv2.resize(heatmap, (oriImg.shape[1], oriImg.shape[0]), interpolation=cv2.INTER_CUBIC)

        paf = np.squeeze(output_blobs[0])
        paf = cv2.resize(paf, (0, 0), fx=model_params['stride'], fy=model_params['stride'], interpolation=cv2.INTER_CUBIC)
        paf = paf[:imageToTest_padded.shape[0] - pad[2], :imageToTest_padded.shape[1] - pad[3], :]
        paf = cv2.resize(paf, (oriImg.shape[1], oriImg.shape[0]), interpolation=cv2.INTER_CUBIC)

        heatmap_avg += heatmap / len(multiplier)
        paf_avg += paf / len(multiplier)

    all_peaks = []
    peak_counter = 0
    for part in range(18):
        map_ori = heatmap_avg[:, :, part]
        map = gaussian_filter(map_ori, sigma=3)

        map_left = np.zeros(map.shape); map_left[1:, :] = map[:-1, :]
        map_right = np.zeros(map.shape); map_right[:-1, :] = map[1:, :]
        map_up = np.zeros(map.shape); map_up[:, 1:] = map[:, :-1]
        map_down = np.zeros(map.shape); map_down[:, :-1] = map[:, 1:]

        peaks_binary = np.logical_and.reduce((map >= map_left, map >= map_right, map >= map_up, map >= map_down, map > params['thre1']))
        peaks = list(zip(np.nonzero(peaks_binary)[1], np.nonzero(peaks_binary)[0]))
        peaks_with_score = [x + (map_ori[x[1], x[0]],) for x in peaks]
        id = range(peak_counter, peak_counter + len(peaks))
        peaks_with_score_and_id = [peaks_with_score[i] + (id[i],) for i in range(len(id))]

        all_peaks.append(peaks_with_score_and_id)
        peak_counter += len(peaks)

    position = checkPosition(all_peaks)
    checkKneeling(all_peaks)
    checkHandFold(all_peaks)

    canvas = draw(input_image, all_peaks)
    return canvas, position

def draw(input_image, all_peaks):
    canvas = cv2.imread(input_image)
    for i in range(18):
        for j in range(len(all_peaks[i])):
            cv2.circle(canvas, all_peaks[i][j][0:2], 4, colors[i], thickness=-1)
    return canvas

def checkPosition(all_peaks):
    try:
        f = 0
        a = all_peaks[16][0][0:2] if all_peaks[16] else all_peaks[17][0][0:2]
        f = 1 if all_peaks[16] else 0
        b = all_peaks[11][0][0:2]
        angle = calcAngle(a, b)
        degrees = round(math.degrees(angle))
        if f:
            degrees = 180 - degrees

        if degrees < 70:
            return 1  # Hunchback
        elif degrees > 110:
            return -1  # Reclined
        else:
            return 0  # Straight
    except:
        print("‚ö† Could not calculate posture: Ear or Hip keypoints missing.")
        return None

def checkHandFold(all_peaks):
    try:
        distance = calcDistance(all_peaks[3][0][0:2], all_peaks[4][0][0:2])
        armdist = calcDistance(all_peaks[2][0][0:2], all_peaks[3][0][0:2])
        if (armdist - 100) < distance < (armdist + 100):
            print("Not Folding Hands")
        else:
            print("Folding Hands")
    except:
        try:
            distance = calcDistance(all_peaks[6][0][0:2], all_peaks[7][0][0:2])
            armdist = calcDistance(all_peaks[6][0][0:2], all_peaks[5][0][0:2])
            if (armdist - 100) < distance < (armdist + 100):
                print("Not Folding Hands")
            else:
                print("Folding Hands")
        except:
            print("Unable to detect arm joints")

def checkKneeling(all_peaks):
    try:
        hip = all_peaks[11][0][0:2]
        rightankle = all_peaks[10][0][0:2]
        leftankle = all_peaks[13][0][0:2]

        leftangle = calcAngle(hip, leftankle)
        rightangle = calcAngle(hip, rightankle)
        leftdegrees = round(math.degrees(leftangle))
        rightdegrees = round(math.degrees(rightangle))

        if all_peaks[16]:
            pass
        else:
            leftdegrees = 180 - leftdegrees
            rightdegrees = 180 - rightdegrees

        if leftdegrees > 60 and rightdegrees > 60:
            print("Both Legs are in Kneeling")
        elif rightdegrees > 60:
            print("Right leg is kneeling")
        elif leftdegrees > 60:
            print("Left leg is kneeling")
        else:
            print("Not kneeling")
    except:
        print("legs not detected")

def calcAngle(a, b):
    ax, ay = a
    bx, by = b
    if ax == bx:
        return math.pi / 2
    return math.atan2(by - ay, bx - ax)

def calcDistance(a, b):
    x1, y1 = a
    x2, y2 = b
    return math.hypot(x2 - x1, y2 - y1)

def showimage(img):
    screen_res = 1280, 720
    scale_width = screen_res[0] / img.shape[1]
    scale_height = screen_res[1] / img.shape[0]
    scale = min(scale_width, scale_height)
    window_width = int(img.shape[1] * scale)
    window_height = int(img.shape[0] * scale)
    cv2.namedWindow('image', cv2.WINDOW_NORMAL)
    cv2.resizeWindow('image', window_width, window_height)
    cv2.imshow('image', img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

if _name_ == '_main_':
    
    print('üìπ Starting real-time posture analysis...')
    model = get_testing_model()
    model.load_weights('./model/keras/model.h5')
    params, model_params = config_reader()

    cap = cv2.VideoCapture(0)  # 0 = default webcam

    if not cap.isOpened():
        print("‚ùå Cannot open webcam")
        exit()

    while True:
        ret, frame = cap.read()
        if not ret:
            print("‚ùå Failed to grab frame")
            break

        # Save the frame temporarily to disk
        temp_path = 'temp_frame.jpg'
        cv2.imwrite(temp_path, frame)

        # Run posture analysis on the saved frame
        canvas, position = process(temp_path, params, model_params, model)

        # Show the frame with keypoints if valid
        if canvas is not None:
            label = "Posture: "
            if position == 1:
                label += "Hunchback"
            elif position == -1:
                label += "Reclined"
            elif position == 0:
                label += "Straight"
            else:
                label += "Unknown"

            cv2.putText(canvas, label, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)
            cv2.imshow('Real-Time Posture Detection', canvas)

        # Press 'q' to quit
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()
